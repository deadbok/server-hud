Vagrant.configure("2") do |config|
    config.vm.box = "debian/stretch64"
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    vagrant_root = File.dirname(__FILE__)
    ENV['ANSIBLE_ROLES_PATH'] = "#{vagrant_root}/../../roles"

    serverhud_version = "0.6.0"

    vms = [
        {
            :name => 'serverhud-firewall',
            :private_ip => "192.168.50.2",
            :private_net_name => "server-hud",
            :memory => 256,
            :gui => false,
            :host_vars_file => "firewall.yml"
        },
        {
            :name => 'serverhud-webserver',
            :private_ip => "192.168.50.3",
            :private_net_name => "server-hud",
            :memory => 512,
            :gui => false,
            :host_vars_file => "webserver.yml"
        },
        {
            :name => 'serverhud-client',
            :private_ip => "192.168.50.4",
            :private_net_name => "server-hud",
            :memory => 1024,
            :gui => true,
            :host_vars_file => "client.yml"
        }
    ]

    vms.each do |machine_def|
        config.vm.define machine_def[:name] do |machine|
            machine.vm.hostname = machine_def[:name]

            machine.vm.provision "ansible", run: "always" do |ansible|
                ansible.playbook = "test.yml"
                #ansible.compatibility_mode = "2.0"
                #ansible.verbose = "-vv"
                dir = File.dirname(File.expand_path(__FILE__))
                ansible.extra_vars = "#{dir}/host_vars/#{machine_def[:host_vars_file]}"
                ansible.groups = {
                    "client" => ["serverhud-client"],
                    "webserver" => ["serverhud-webserver"],
                    "firewall" => ["serverhud-firewall"]
                }
            end

            # Reboot the client when done installing.
            if machine_def[:name] == "serverhud-client"
                machine.vm.provision :shell, run: "always", name: "Reboot client machine" do |s|
                    s.inline = <<-SHELL
                        reboot
                    SHELL
                end
            end

            machine.vm.network "private_network",
                               ip: machine_def[:private_ip],
                               virtualbox__intnet: machine_def[:private_net_name]

            machine.vm.provider "virtualbox" do |vb|
                vb.memory = machine_def[:memory]
                vb.gui = machine_def[:gui]
            end
        end
    end
end
